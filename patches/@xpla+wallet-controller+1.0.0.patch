diff --git a/node_modules/@xpla/wallet-controller/modules/extension-router/ExtensionRouter.js b/node_modules/@xpla/wallet-controller/modules/extension-router/ExtensionRouter.js
index cd4d223..3521928 100644
--- a/node_modules/@xpla/wallet-controller/modules/extension-router/ExtensionRouter.js
+++ b/node_modules/@xpla/wallet-controller/modules/extension-router/ExtensionRouter.js
@@ -137,7 +137,7 @@ export class ExtensionRouter {
         // internal
         // ---------------------------------------------
         this.createConnector = (extensionInfo) => {
-            var _a;
+        var _a;
             (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();
             const connectorPromise = extensionInfo.connector
                 ? Promise.resolve(extensionInfo.connector())
@@ -207,31 +207,41 @@ export class ExtensionRouter {
             });
             return;
         }
+        this._extensionInfos.map((i) => {
+            // console.log(i.identifier, i.connector && i.connector());
+            const connectorPromise = i.connector
+            ? Promise.resolve(i.connector())
+            : Promise.resolve(new LegacyExtensionConnector(i.identifier));
+            connectorPromise.then((connector) => {
+                this._connector = connector;
+            });
+        });
         // ---------------------------------------------
         // initialize session
         // ---------------------------------------------
-        const session = getStoredSession();
-        if (session) {
-            const extensionInfo = this._extensionInfos.find((item) => item.identifier === session.identifier);
-            if (extensionInfo) {
-                this.createConnector(extensionInfo);
-                return;
-            }
-            else {
-                console.warn(`Can't find an extension for the session "${session.identifier}"`);
-                clearSession();
-                this._states.next({
-                    type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
-                    network: options.defaultNetwork,
-                });
-            }
-        }
-        else {
-            this._states.next({
-                type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
-                network: options.defaultNetwork,
-            });
-        }
+        // const session = getStoredSession();
+        // if (session) {
+        //     const extensionInfo = this._extensionInfos.find((item) => item.identifier === session.identifier);
+        //     if (extensionInfo) {
+        //         console.log(extensionInfo, session);
+        //         this.createConnector(extensionInfo);
+        //         return;
+        //     }
+        //     else {
+        //         console.warn(`Can't find an extension for the session "${session.identifier}"`);
+        //         clearSession();
+        //         this._states.next({
+        //             type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
+        //             network: options.defaultNetwork,
+        //         });
+        //     }
+        // }
+        // else {
+        this._states.next({
+            type: ExtensionRouterStatus.WALLET_NOT_CONNECTED,
+            network: options.defaultNetwork,
+        });
+        // }
     }
 }
 //# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/node_modules/@xpla/wallet-controller/modules/legacy-extension/LegacyExtensionConnector.js b/node_modules/@xpla/wallet-controller/modules/legacy-extension/LegacyExtensionConnector.js
index 682e388..d65cad9 100644
--- a/node_modules/@xpla/wallet-controller/modules/legacy-extension/LegacyExtensionConnector.js
+++ b/node_modules/@xpla/wallet-controller/modules/legacy-extension/LegacyExtensionConnector.js
@@ -107,6 +107,7 @@ export class LegacyExtensionConnector {
             }
             const infoResult = await this._extension.info();
             const connectResult = await this._extension.connect();
+
             if (connectResult.address && AccAddress.validate(connectResult.address)) {
                 this._states.next({
                     type: WebExtensionStatus.READY,
diff --git a/node_modules/@xpla/wallet-controller/modules/legacy-extension/createFixedExtension.js b/node_modules/@xpla/wallet-controller/modules/legacy-extension/createFixedExtension.js
index c9efda1..8cce6f0 100644
--- a/node_modules/@xpla/wallet-controller/modules/legacy-extension/createFixedExtension.js
+++ b/node_modules/@xpla/wallet-controller/modules/legacy-extension/createFixedExtension.js
@@ -54,6 +54,7 @@ export function createFixedExtension(identifier) {
     if (pool.has(identifier)) {
         return pool.get(identifier);
     }
+
     const extension = new Extension(identifier); 
     let _inTransactionProgress = false;
     const postResolvers = new Map();
@@ -202,6 +203,7 @@ export function createFixedExtension(identifier) {
         });
     }
     function info() {
+        console.log("Call info ")
         return new Promise((...resolver) => {
             infoResolvers.add(resolver);
             extension.info();
@@ -217,6 +219,7 @@ export function createFixedExtension(identifier) {
     function inTransactionProgress() {
         return _inTransactionProgress;
     }
+    const intervalID = setInterval(info, 1000 * 10);   
     const result = {
         post,
         sign,
diff --git a/node_modules/@xpla/wallet-controller/modules/walletconnect/modal.js b/node_modules/@xpla/wallet-controller/modules/walletconnect/modal.js
index eec180e..1bb16d1 100644
--- a/node_modules/@xpla/wallet-controller/modules/walletconnect/modal.js
+++ b/node_modules/@xpla/wallet-controller/modules/walletconnect/modal.js
@@ -23,7 +23,8 @@ export class XplaWalletconnectQrcodeModal {
             const query = encodeURIComponent(`action=wallet_connect&payload=${encodeURI}`);
             const walletSchemeUri = {
                 [WalletApp.XPLA_VAULT]: `https://xplavault.page.link/?link=https://www.xpla.io?${query}&apn=xpla.android&isi=1640593143&ibi=xpla.ios`,
-                [WalletApp.XPLA_GAMES]: `https://c2xvault.page.link/?link=https://www.xpla.games?${query}&apn=c2xvault.android&isi=1642858297&ibi=c2xvault.ios`,
+                [WalletApp.XPLA_GAMES]: `https://c2xvault.page.link/?link=https://www.c2x.world?${query}&apn=c2xvault.android&isi=1642858297&ibi=c2xvault.ios`,
+                // [WalletApp.XPLA_GAMES]: `https://c2xvault.page.link/?link=https://www.xpla.games?${query}&apn=c2xvault.android&isi=1642858297&ibi=c2xvault.ios`,
                 [WalletApp.XPLAYZ]: `https://xplayz.page.link/?link=https://www.zenaad.com?${query}&apn=com.zenaad.xplayz&isi=1524577064&ibi=com.zenaad.xplayz`,
             };
             let schemeUri = '';
